workflows:
  ios-automatic-code-signing:
    name: CiCd Dyz Test
    instance_type: mac_mini_m2
    working_directory: ios/
    integrations:
      app_store_connect: "eSparkBiz Technologies Private Limited"
    environment:
      groups:
        - cicd Megic
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.cicdmegic.app
      vars:
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        BUNDLE_ID: com.cicdmegic.app
        APP_STORE_APP_ID: 6692628444
        APP_STORE_CONNECT_API_KEY: "YOUR_APP_STORE_CONNECT_API_KEY"
        xcode: 15.2
        FLUTTER_VERSION: "3.24.3"
        ENV_VERSION_NAME: ""  # Set this to your environment variable
      cocoapods: default
    scripts:
      - name: Install Flutter
        script: |
          git clone https://github.com/flutter/flutter.git
          cd flutter
          git checkout $FLUTTER_VERSION  # Use specified version
          export PATH="$PATH:$(pwd)/bin"
          flutter channel stable
          flutter upgrade

      - name: Get Flutter packages
        script: |
          flutter packages pub get

      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;

      - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
        script: |
          keychain initialize
          keychain add-certificates

      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles

      - name: Fetch version name and build number from TestFlight
        script: |
          # Install app-store-connect CLI if it's not already installed
          gem install app_store_connect
          
          # Fetch the latest build details
          LATEST_BUILD_DETAILS=$(app-store-connect list-builds $APP_STORE_APP_ID --json)
          
          echo "Latest Build Details: $LATEST_BUILD_DETAILS"

          # Use Python to extract the latest version name from the JSON output
          LATEST_VERSION_NAME=$(echo $LATEST_BUILD_DETAILS | python3 -c "import sys, json; print(json.load(sys.stdin)[0]['version'])")
          
          echo "Latest Version Name: $LATEST_VERSION_NAME"

          # Fetch the latest build number from TestFlight
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number $APP_STORE_APP_ID)
          
          echo "Latest Build Number: $LATEST_BUILD_NUMBER"

          # Increment the build number
          NEXT_BUILD_NUMBER=$(($LATEST_BUILD_NUMBER + 1))
          
          # Determine the version name based on the ENV_VERSION_NAME variable
          if [ -z "$ENV_VERSION_NAME" ]; then
            NEXT_VERSION_NAME="$LATEST_VERSION_NAME"
          else
            NEXT_VERSION_NAME="$ENV_VERSION_NAME"
          fi
          
          echo "Next Version Name: $NEXT_VERSION_NAME"
          echo "Next Build Number: $NEXT_BUILD_NUMBER"

          # Use agvtool to update the version and build number in the Xcode project
          cd ios
          agvtool new-marketing-version $NEXT_VERSION_NAME
          agvtool new-version -all $NEXT_BUILD_NUMBER

      - name: Clean build folder
        script: |
          flutter clean
          rm -rf ios/Pods
          rm -rf ios/Podfile.lock
          flutter pub get
          pod install --repo-update

      - name: Flutter build ipa
        script: |
          flutter build ipa --release \
            --build-name=$NEXT_VERSION_NAME \
            --build-number=$NEXT_BUILD_NUMBER \
            --export-options-plist=/Users/builder/export_options.plist

    artifacts:
      - $CM_BUILD_DIR/build/ios/ipa/*.ipa
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: false
      email:
        recipients:
          - iostest680@gmail.com
        notify:
          success: true
          failure: true
